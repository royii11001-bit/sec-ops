name: SecOps CI - Security Validation & Build

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: secops-github-scanner

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # SAST - Static Application Security Testing
  static-security-analysis:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis (SAST)
      id: codeql-init
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality
      continue-on-error: true

    - name: Autobuild
      if: steps.codeql-init.outcome == 'success'
      uses: github/codeql-action/autobuild@v3
      continue-on-error: true

    - name: Perform CodeQL Analysis
      if: steps.codeql-init.outcome == 'success'
      uses: github/codeql-action/analyze@v3
      continue-on-error: true
      
    - name: Alternative SAST with Bandit
      if: steps.codeql-init.outcome != 'success'
      run: |
        echo "CodeQL not available, running alternative SAST with Bandit..."
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
        echo "Alternative SAST completed"

  # Vulnerability Assessment
  vulnerability-assessment:
    name: Container Vulnerability Assessment
    runs-on: ubuntu-latest
    needs: static-security-analysis
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (local only)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: local-image:latest

    - name: Generate Vulnerability Data
      run: |
        echo "Generating vulnerability data for Docker image..."
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --severity MEDIUM,HIGH,CRITICAL --format json -o /tmp/trivy-report.json local-image:latest


  # Secure Container Build Pipeline
  secure-container-build:
    name: Secure Container Build & Security Gate
    runs-on: ubuntu-latest
    needs: [static-security-analysis, vulnerability-assessment]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Log in to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        load: ${{ github.event_name == 'pull_request' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Security Gate - Critical Check
      run: |
        echo "Running security gate..."
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --severity LOW,MEDIUM,HIGH,CRITICAL --format json \
          ${{ steps.meta.outputs.tags }} > /tmp/security-scan.json
        
        # Check for critical vulnerabilities only
        CRITICAL=$(cat /tmp/security-scan.json | jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
        
        if [ "$CRITICAL" -gt 0 ]; then
          echo "SECURITY GATE FAILED: $CRITICAL critical vulnerabilities detected!"
          exit 1
        fi
        
        echo "Security gate passed"

    - name: Sign Container Image
      if: github.ref == 'refs/heads/main'
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "Signing image with Cosign..."
        cosign sign --yes ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}
        echo "Image signed successfully"

