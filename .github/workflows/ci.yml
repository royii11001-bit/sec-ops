name: CI - Security & Build

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: secops-github-scanner

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # SAST - Static Application Security Testing
  sast:
    name: SAST - Code Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis (SAST)
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    - name: Upload SARIF results
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results/python.sarif

  # Vulnerability Report Generation
  vulnerability-report:
    name: Generate Vulnerability Report
    runs-on: ubuntu-latest
    needs: sast
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (local only)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: local-image:latest

    - name: Run Trivy Vulnerability Report
      run: |
        echo "üîç Generating vulnerability report for Docker image..."
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --severity MEDIUM,HIGH,CRITICAL --format json -o trivy-report.json local-image:latest
        cat trivy-report.json

    - name: Upload Trivy Report Artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-vulnerability-report
        path: trivy-report.json

  # Container Build, Sign & Scan
  build-sign-scan:
    name: Build, Sign & Scan Container
    runs-on: ubuntu-latest
    needs: [sast, vulnerability-report]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Log in to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        load: ${{ github.event_name == 'pull_request' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image & Package Vulnerability Scan
      run: |
        echo "üîç Scanning image for vulnerabilities..."
        
        # Run Trivy scan and show MEDIUM+ vulnerabilities
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --severity MEDIUM,HIGH,CRITICAL \
          ${{ steps.meta.outputs.tags }}
        
        # Check for CRITICAL vulnerabilities and block if found
        CRITICAL=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --severity CRITICAL --quiet --format json \
          ${{ steps.meta.outputs.tags }} | \
          jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
        
        echo ""
        echo "üîç Critical vulnerabilities found: $CRITICAL"
        
        if [ "$CRITICAL" -gt 0 ]; then
          echo "‚ùå CRITICAL vulnerabilities detected - Build blocked!"
          exit 1
        fi
        
        echo "‚úÖ No critical vulnerabilities - Build can proceed"

    - name: Sign Container Image
      if: github.ref == 'refs/heads/main'
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "üîê Signing image with Cosign..."
        cosign sign --yes ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}
        echo "‚úÖ Image signed successfully"
